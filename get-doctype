#!/usr/bin/env node

/*
 * Javascript module for parsing doctypes in XML document.
 * Useful to get name, pubid and sysid whithout parsing the whole XML document
 * Make usage of existing module :
 *   - saxjs for SAX parsing XML document (https://github.com/isaacs/sax-js)
 *   - piece of code of "xmldom" for splitting doctype into correc parts (https://github.com/jindw/xmldom, split function of sax.js file)
 */

'use strict';

var fs = require('fs');
var saxStream = require("sax").createStream(true);

var doctype = new Object();

saxStream.on("opentag", function(node) {
  // opened a tag.  node has "name" and "attributes"
  // console.log("tag <" + node.name + "> ouvert, on s'arrete");
  process.exit(0);
});

saxStream.on("doctype", function(doctypeString) {
  // opened a tag.  node has "name" and "attributes"
  // console.log("doctype détectée : ");
  var trimmedDoctype = doctypeString.replace(/\s+/g, ' ').trim();
  // console.log(trimmedDoctype.trim());
  var doctypeParts = trimmedDoctype.split(" ");
  doctype.name = doctypeParts[0];

  //Plus d'infos sur la partie DOCTYPE : http://www.w3.org/TR/REC-xml/#NT-doctypedecl
  /*
  if (doctypeParts[1] === "SYSTEM") {
    //DTD système, une seule partie entre quotes : le chemin vers la DTD
    doctype.type = "SYSTEM";
    doctype.path = doctypeParts[2];

  } else if (doctypeParts[1] === "PUBLIC") {
    //DTD public, deux parties entre guillemets : publicID + URL vers DTD
    doctype.type = "PUBLIC";
    doctype.publicID = doctypeParts[2];
    var doctypeURL = trimmedDoctype.split("\" \"")[1].split("\"")[0];
    // console.log(doctypeURL); 
    doctype.path = doctypeURL;
  } else if (doctypeParts[1].charAt(0)) {
    //DTD locale : définier entre '[' et ']'
    doctype.type = "LOCAL";
  } else {
    //DTD mal formatée
  }
*/
  var start = 0;
  var dt = "<!DOCTYPE " + trimmedDoctype + ">";
  console.log(dt);

  var matchs = split(dt, start);
  // console.log(matchs);
  
  var len = matchs.length;
  if (len > 1 && /!doctype/i.test(matchs[0][0])) {
    doctype.name = matchs[1][0];
    doctype.pubid = len > 3 && /^public$/i.test(matchs[2][0]) && matchs[3][0]
    doctype.sysid = len > 4 && matchs[4][0];
    // var lastMatch = matchs[len - 1]
    // domBuilder.startDTD(name, pubid && pubid.replace(/^(['"])(.*?)\1$/, '$2'),
    //   sysid && sysid.replace(/^(['"])(.*?)\1$/, '$2'));
    // domBuilder.endDTD();
    // return lastMatch.index + lastMatch[0].length
  }

   console.log(doctype);
  process.exit(0);
});

saxStream.on("error", function(err) {
  // opened a tag.  node has "name" and "attributes"
  process.stderr.write(err + "\n");
  process.exit(1);
});

/*
var xmlPath = "/home/niederle/applis/istex/li2/li-xml-val/test/dataset/corpus/testFile.Success";
fs.createReadStream(xmlPath).pipe(saxStream);
*/
process.stdin.pipe(saxStream);



function split(source, start) {
  var match;
  var buf = [];
  var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
  reg.lastIndex = start;
  reg.exec(source); //skip <
  while (match = reg.exec(source)) {
    buf.push(match);
    if (match[1]) return buf;
  }
}