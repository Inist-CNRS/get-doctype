#!/usr/bin/env node

/*
 * Javascript module for parsing doctypes in XML document.
 * Useful to get name, pubid and sysid whithout parsing the whole XML document
 * Make usage of existing module :
 *   - saxjs for SAX parsing XML document (https://github.com/isaacs/sax-js)
 *   - piece of code of "xmldom" for splitting doctype into correc parts (https://github.com/jindw/xmldom, split function of sax.js file)
 */

'use strict';

var fs = require('fs');
var saxStream = require("sax").createStream(true);

// object which will be displayed as output
var doctype = new Object();

var exitCode = 0;

// If an opened tag is read, no Doctype is found, exit with status code = 1
saxStream.on("opentag", function(node) {
  process.stderr.write("No doctype found\n");
  process.exit(1);
});

// doctype tag read, trying to "smart" parse it
saxStream.on("doctype", function(doctypeString) {

  // console.log("doctype found : ");
  var trimmedDoctype = doctypeString.replace(/\s+/g, ' ').trim();

  var start = 0;
  var dt = "<!DOCTYPE " + trimmedDoctype + ">";

  // split the doctype to get name and identifiers
  var matchs = split(dt, start);
  var len = matchs.length;
  if (len > 1 && /!doctype/i.test(matchs[0][0])) {
    doctype.name = matchs[1][0];
    doctype.pubid = len > 3 && /^public$/i.test(matchs[2][0]) && matchs[3][0]
    doctype.sysid = len > 4 && matchs[4][0];
  } else {
    process.stderr.write("Unable to parse doctype\n");
    exitCode = 1;
  }

  if (exitCode === 0) console.log(doctype);
  process.exit(exitCode);
});

//Error parsing the XML document
saxStream.on("error", function(err) {
  // opened a tag.  node has "name" and "attributes"
  process.stderr.write("SAX parsing problem :\n");
  process.stderr.write(err + "\n");
  process.exit(1);
});

/*
var xmlPath = "/home/niederle/applis/istex/li2/li-xml-val/test/dataset/corpus/testFile.Success";
fs.createReadStream(xmlPath).pipe(saxStream);
*/
process.stdin.pipe(saxStream);


/*
 * Split the doctype string
 * Thanks to https://github.com/jindw/xmldom
 */
function split(source, start) {
  var match;
  var buf = [];
  var reg = /'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;
  reg.lastIndex = start;
  reg.exec(source); //skip <
  while (match = reg.exec(source)) {
    buf.push(match);
    if (match[1]) return buf;
  }
}